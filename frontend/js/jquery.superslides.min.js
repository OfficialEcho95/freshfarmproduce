/*! Superslides - v0.6.3-wip - 2013-12-17
* https://github.com/nicinabox/superslides
* Copyright (c) 2013 Nic Aitch; Licensed MIT */
(function (i, t) {
  let n; const e = 'superslides'; n = function (n, e) {
    this.options = t.extend({
      play: !1,
      animation_speed: 600,
      animation_easing: 'swing',
      animation: 'slide',
      inherit_width_from: i,
      inherit_height_from: i,
      pagination: !0,
      hashchange: !1,
      scrollable: !0,
      elements: {
        preserve: '.preserve', nav: '.slides-navigation', container: '.slides-container', pagination: '.slides-pagination',
      },
    }, e); const s = this; const o = t('<div>', { class: 'slides-control' }); let a = 1; this.$el = t(n), this.$container = this.$el.find(this.options.elements.container); const r = function () { return a = s._findMultiplier(), s.$el.on('click', `${s.options.elements.nav} a`, function (i) { i.preventDefault(), s.stop(), t(this).hasClass('next') ? s.animate('next', () => { s.start(); }) : s.animate('prev', () => { s.start(); }); }), t(document).on('keyup', (i) => { i.keyCode === 37 && s.animate('prev'), i.keyCode === 39 && s.animate('next'); }), t(i).on('resize', () => { setTimeout(() => { const i = s.$container.children(); s.width = s._findWidth(), s.height = s._findHeight(), i.css({ width: s.width, left: s.width }), s.css.containers(), s.css.images(); }, 10); }), s.options.hashchange && t(i).on('hashchange', () => { let i; const t = s._parseHash(); i = s._upcomingSlide(t), i >= 0 && i !== s.current && s.animate(i); }), s.pagination._events(), s.start(), s; }; const h = {
      containers() {
        s.init ? (s.$el.css({ height: s.height }), s.$control.css({ width: s.width * a, left: -s.width }), s.$container.css({})) : (t('body').css({ margin: 0 }), s.$el.css({
          position: 'relative', overflow: 'hidden', width: '100%', height: s.height,
        }), s.$control.css({
          position: 'relative', transform: 'translate3d(0)', height: '100%', width: s.width * a, left: -s.width,
        }), s.$container.css({
          display: 'none', margin: '0', padding: '0', listStyle: 'none', position: 'relative', height: '100%',
        })), s.size() === 1 && s.$el.find(s.options.elements.nav).hide();
      },
      images() {
        const i = s.$container.find('img').not(s.options.elements.preserve); i.removeAttr('width').removeAttr('height').css({
          '-webkit-backface-visibility': 'hidden', '-ms-interpolation-mode': 'bicubic', position: 'absolute', left: '0', top: '0', 'z-index': '-1', 'max-width': 'none',
        }), i.each(function () { const i = s.image._aspectRatio(this); const n = this; if (t.data(this, 'processed'))s.image._scale(n, i), s.image._center(n, i); else { const e = new Image(); e.onload = function () { s.image._scale(n, i), s.image._center(n, i), t.data(n, 'processed', !0); }, e.src = this.src; } });
      },
      children() {
        let i = s.$container.children(); i.is('img') && (i.each(function () { if (t(this).is('img')) { t(this).wrap('<div>'); const i = t(this).attr('id'); t(this).removeAttr('id'), t(this).parent().attr('id', i); } }), i = s.$container.children()), s.init || i.css({ display: 'none', left: 2 * s.width }), i.css({
          position: 'absolute', overflow: 'hidden', height: '100%', width: s.width, top: 0, zIndex: 0,
        });
      },
    }; let c = { slide(i, t) { const n = s.$container.children(); const e = n.eq(i.upcoming_slide); e.css({ left: i.upcoming_position, display: 'block' }), s.$control.animate({ left: i.offset }, s.options.animation_speed, s.options.animation_easing, () => { s.size() > 1 && (s.$control.css({ left: -s.width }), n.eq(i.upcoming_slide).css({ left: s.width, zIndex: 2 }), i.outgoing_slide >= 0 && n.eq(i.outgoing_slide).css({ left: s.width, display: 'none', zIndex: 0 })), t(); }); }, fade(i, t) { const n = this; const e = n.$container.children(); const s = e.eq(i.outgoing_slide); const o = e.eq(i.upcoming_slide); o.css({ left: this.width, opacity: 0, display: 'block' }).animate({ opacity: 1 }, n.options.animation_speed, n.options.animation_easing), i.outgoing_slide >= 0 ? s.animate({ opacity: 0 }, n.options.animation_speed, n.options.animation_easing, () => { n.size() > 1 && (e.eq(i.upcoming_slide).css({ zIndex: 2 }), i.outgoing_slide >= 0 && e.eq(i.outgoing_slide).css({ opacity: 1, display: 'none', zIndex: 0 })), t(); }) : (o.css({ zIndex: 2 }), t()); } }; c = t.extend(c, t.fn.superslides.fx); const d = {
      _centerY(i) { const n = t(i); n.css({ top: (s.height - n.height()) / 2 }); }, _centerX(i) { const n = t(i); n.css({ left: (s.width - n.width()) / 2 }); }, _center(i) { s.image._centerX(i), s.image._centerY(i); }, _aspectRatio(i) { if (!i.naturalHeight && !i.naturalWidth) { const t = new Image(); t.src = i.src, i.naturalHeight = t.height, i.naturalWidth = t.width; } return i.naturalHeight / i.naturalWidth; }, _scale(i, n) { n = n || s.image._aspectRatio(i); const e = s.height / s.width; const o = t(i); e > n ? o.css({ height: s.height, width: s.height / n }) : o.css({ height: s.width * n, width: s.width }); },
    }; const l = {
      _setCurrent(i) { if (s.$pagination) { const t = s.$pagination.children(); t.removeClass('current'), t.eq(i).addClass('current'); } }, _addItem(i) { const n = i + 1; let e = n; const o = s.$container.children().eq(i); const a = o.attr('id'); a && (e = a); const r = t('<a>', { href: `#${e}`, text: e }); r.appendTo(s.$pagination); }, _setup() { if (s.options.pagination && s.size() !== 1) { const i = t('<nav>', { class: s.options.elements.pagination.replace(/^\./, '') }); s.$pagination = i.appendTo(s.$el); for (let n = 0; s.size() > n; n++)s.pagination._addItem(n); } }, _events() { s.$el.on('click', `${s.options.elements.pagination} a`, function (i) { i.preventDefault(); let t; const n = s._parseHash(this.hash); t = s._upcomingSlide(n, !0), t !== s.current && s.animate(t, () => { s.start(); }); }); },
    }; return this.css = h, this.image = d, this.pagination = l, this.fx = c, this.animation = this.fx[this.options.animation], this.$control = this.$container.wrap(o).parent('.slides-control'), s._findPositions(), s.width = s._findWidth(), s.height = s._findHeight(), this.css.children(), this.css.containers(), this.css.images(), this.pagination._setup(), r();
  }, n.prototype = {
    _findWidth() { return t(this.options.inherit_width_from).width(); }, _findHeight() { return t(this.options.inherit_height_from).height(); }, _findMultiplier() { return this.size() === 1 ? 1 : 3; }, _upcomingSlide(i, t) { if (t && !isNaN(i) && (i -= 1), /next/.test(i)) return this._nextInDom(); if (/prev/.test(i)) return this._prevInDom(); if (/\d/.test(i)) return +i; if (i && /\w/.test(i)) { const n = this._findSlideById(i); return n >= 0 ? n : 0; } return 0; }, _findSlideById(i) { return this.$container.find(`#${i}`).index(); }, _findPositions(i, t) { t = t || this, void 0 === i && (i = -1), t.current = i, t.next = t._nextInDom(), t.prev = t._prevInDom(); }, _nextInDom() { let i = this.current + 1; return i === this.size() && (i = 0), i; }, _prevInDom() { let i = this.current - 1; return i < 0 && (i = this.size() - 1), i; }, _parseHash(t) { return t = t || i.location.hash, t = t.replace(/^#/, ''), t && !isNaN(+t) && (t = +t), t; }, size() { return this.$container.children().length; }, destroy() { return this.$el.removeData(); }, update() { this.css.children(), this.css.containers(), this.css.images(), this.pagination._addItem(this.size()), this._findPositions(this.current), this.$el.trigger('updated.slides'); }, stop() { clearInterval(this.play_id), delete this.play_id, this.$el.trigger('stopped.slides'); }, start() { const n = this; n.options.hashchange ? t(i).trigger('hashchange') : this.animate(), this.options.play && (this.play_id && this.stop(), this.play_id = setInterval(() => { n.animate(); }, this.options.play)), this.$el.trigger('started.slides'); }, animate(t, n) { const e = this; const s = {}; if (!(this.animating || (this.animating = !0, void 0 === t && (t = 'next'), s.upcoming_slide = this._upcomingSlide(t), s.upcoming_slide >= this.size()))) { if (s.outgoing_slide = this.current, s.upcoming_position = 2 * this.width, s.offset = -s.upcoming_position, (t === 'prev' || s.outgoing_slide > t) && (s.upcoming_position = 0, s.offset = 0), e.size() > 1 && e.pagination._setCurrent(s.upcoming_slide), e.options.hashchange) { const o = s.upcoming_slide + 1; const a = e.$container.children(`:eq(${s.upcoming_slide})`).attr('id'); i.location.hash = a || o; }e.$el.trigger('animating.slides', [s]), e.animation(s, () => { e._findPositions(s.upcoming_slide, e), typeof n === 'function' && n(), e.animating = !1, e.$el.trigger('animated.slides'), e.init || (e.$el.trigger('init.slides'), e.init = !0, e.$container.fadeIn('fast')); }); } },
  }, t.fn[e] = function (i, s) { let o = []; return this.each(function () { let a; let r; let h; return a = t(this), r = a.data(e), h = typeof i === 'object' && i, r || (o = a.data(e, r = new n(this, h))), typeof i === 'string' && (o = r[i], typeof o === 'function') ? o = o.call(r, s) : void 0; }), o; }, t.fn[e].fx = {};
}(this, jQuery));
